syntax = "proto3";
package ojo.airdrop.v1;

import "gogoproto/gogo.proto";
import "ojo/airdrop/v1/airdrop.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/ojo-network/ojo/x/airdrop/types";

// Msg defines the airdrop Msg service.
service Msg {
  // SetParams sets the parameters for the airdrop module.
  rpc SetParams(MsgSetParams) returns (MsgSetParamsResponse);

  // ClaimAirdrop allows an airdrop recipient to claim the 2nd portion of the airdrop specified in the
  // CreateAirdropAccount message. This transaction will create a new Delayed Vesting Account
  // at toAddress with the amount of tokens determined by tokensToReceive * AirdropFactor.
  // This account will vest as long as vestingLength above. This transaction fails if the amount
  // of tokens staked by the fromAddress account is less than tokensToReceive * DelegationRequirement.
  // Emits an event once the airdrop has been claimed.
  rpc ClaimAirdrop(MsgClaimAirdrop) returns (MsgClaimAirdropResponse);
}

// MsgSetParams defines the SetParams message type.
message MsgSetParams {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the airdrop parameters to update.
  Params params = 2;
}

// MsgSetParamsResponse defines the SetParams response type.
message MsgSetParamsResponse {}

// MsgClaimAirdrop defines the MsgClaimAirdrop message type.
message MsgClaimAirdrop {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "fromAddress";

  string fromAddress = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string toAddress = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgClaimAirdropResponse defines the ClaimAirdrop response type.
message MsgClaimAirdropResponse {}
