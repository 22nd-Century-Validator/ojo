// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/airdrop/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetParams defines the SetParams message type.
type MsgSetParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the airdrop parameters to update.
	Params *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *MsgSetParams) Reset()         { *m = MsgSetParams{} }
func (m *MsgSetParams) String() string { return proto.CompactTextString(m) }
func (*MsgSetParams) ProtoMessage()    {}
func (*MsgSetParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61658dcab776386, []int{0}
}
func (m *MsgSetParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetParams.Merge(m, src)
}
func (m *MsgSetParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetParams proto.InternalMessageInfo

// MsgSetParamsResponse defines the SetParams response type.
type MsgSetParamsResponse struct {
}

func (m *MsgSetParamsResponse) Reset()         { *m = MsgSetParamsResponse{} }
func (m *MsgSetParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetParamsResponse) ProtoMessage()    {}
func (*MsgSetParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61658dcab776386, []int{1}
}
func (m *MsgSetParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetParamsResponse.Merge(m, src)
}
func (m *MsgSetParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetParamsResponse proto.InternalMessageInfo

// MsgCreateAirdropAccountResponse defines the CreateAirdropAccount message type.
type MsgCreateAirdropAccount struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TokensToReceive uint64 `protobuf:"varint,2,opt,name=tokensToReceive,proto3" json:"tokensToReceive,omitempty"`
	VestingEndTime  int64  `protobuf:"varint,3,opt,name=vestingEndTime,proto3" json:"vestingEndTime,omitempty"`
}

func (m *MsgCreateAirdropAccount) Reset()         { *m = MsgCreateAirdropAccount{} }
func (m *MsgCreateAirdropAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdropAccount) ProtoMessage()    {}
func (*MsgCreateAirdropAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61658dcab776386, []int{2}
}
func (m *MsgCreateAirdropAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdropAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdropAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdropAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdropAccount.Merge(m, src)
}
func (m *MsgCreateAirdropAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdropAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdropAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdropAccount proto.InternalMessageInfo

// MsgCreateAirdropAccountResponse defines the CreateAirdropAccount response type.
type MsgCreateAirdropAccountResponse struct {
}

func (m *MsgCreateAirdropAccountResponse) Reset()         { *m = MsgCreateAirdropAccountResponse{} }
func (m *MsgCreateAirdropAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdropAccountResponse) ProtoMessage()    {}
func (*MsgCreateAirdropAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61658dcab776386, []int{3}
}
func (m *MsgCreateAirdropAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdropAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdropAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdropAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdropAccountResponse.Merge(m, src)
}
func (m *MsgCreateAirdropAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdropAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdropAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdropAccountResponse proto.InternalMessageInfo

// MsgClaimAirdrop defines the MsgClaimAirdrop message type.
type MsgClaimAirdrop struct {
	FromAddress string `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress   string `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
}

func (m *MsgClaimAirdrop) Reset()         { *m = MsgClaimAirdrop{} }
func (m *MsgClaimAirdrop) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAirdrop) ProtoMessage()    {}
func (*MsgClaimAirdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61658dcab776386, []int{4}
}
func (m *MsgClaimAirdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAirdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAirdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAirdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAirdrop.Merge(m, src)
}
func (m *MsgClaimAirdrop) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAirdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAirdrop.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAirdrop proto.InternalMessageInfo

// MsgClaimAirdropResponse defines the ClaimAirdrop response type.
type MsgClaimAirdropResponse struct {
}

func (m *MsgClaimAirdropResponse) Reset()         { *m = MsgClaimAirdropResponse{} }
func (m *MsgClaimAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAirdropResponse) ProtoMessage()    {}
func (*MsgClaimAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b61658dcab776386, []int{5}
}
func (m *MsgClaimAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAirdropResponse.Merge(m, src)
}
func (m *MsgClaimAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAirdropResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetParams)(nil), "ojo.airdrop.v1.MsgSetParams")
	proto.RegisterType((*MsgSetParamsResponse)(nil), "ojo.airdrop.v1.MsgSetParamsResponse")
	proto.RegisterType((*MsgCreateAirdropAccount)(nil), "ojo.airdrop.v1.MsgCreateAirdropAccount")
	proto.RegisterType((*MsgCreateAirdropAccountResponse)(nil), "ojo.airdrop.v1.MsgCreateAirdropAccountResponse")
	proto.RegisterType((*MsgClaimAirdrop)(nil), "ojo.airdrop.v1.MsgClaimAirdrop")
	proto.RegisterType((*MsgClaimAirdropResponse)(nil), "ojo.airdrop.v1.MsgClaimAirdropResponse")
}

func init() { proto.RegisterFile("ojo/airdrop/v1/tx.proto", fileDescriptor_b61658dcab776386) }

var fileDescriptor_b61658dcab776386 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x09, 0x2a, 0xe4, 0x5a, 0xb5, 0x92, 0x15, 0x25, 0xa9, 0x55, 0x39, 0x21, 0x42,
	0x34, 0xaa, 0x54, 0x9f, 0x12, 0x24, 0x86, 0x6c, 0x29, 0x30, 0x46, 0x20, 0xb7, 0x03, 0x62, 0x41,
	0x8e, 0x73, 0x5c, 0x2f, 0xc5, 0x7e, 0xd6, 0xdd, 0xc5, 0xb4, 0x2b, 0x13, 0x13, 0xf0, 0x11, 0x2a,
	0x36, 0x36, 0x06, 0x3e, 0x04, 0x63, 0xc5, 0xc4, 0x88, 0x92, 0x01, 0x3e, 0x06, 0x72, 0xce, 0x4e,
	0xdc, 0x28, 0x34, 0xdd, 0x7c, 0xf7, 0xff, 0xbd, 0xff, 0xfd, 0xdf, 0x3d, 0x1f, 0xae, 0xc2, 0x08,
	0x88, 0xc7, 0xc5, 0x50, 0x40, 0x44, 0xe2, 0x36, 0x51, 0xe7, 0x4e, 0x24, 0x40, 0x81, 0xb9, 0x0d,
	0x23, 0x70, 0x52, 0xc1, 0x89, 0xdb, 0x56, 0x99, 0x01, 0x83, 0x99, 0x44, 0x92, 0x2f, 0x4d, 0x59,
	0x7b, 0x4b, 0xe5, 0x59, 0x81, 0x56, 0x77, 0x7d, 0x90, 0x01, 0xc8, 0xd7, 0xba, 0x4c, 0x2f, 0x52,
	0xa9, 0xaa, 0x57, 0x24, 0x90, 0x2c, 0xa9, 0x0b, 0x24, 0x4b, 0x05, 0x3b, 0x15, 0x06, 0x9e, 0xa4,
	0x24, 0x6e, 0x0f, 0xa8, 0xf2, 0xda, 0xc4, 0x07, 0x1e, 0x6a, 0xbd, 0xf9, 0x11, 0xe1, 0xad, 0xbe,
	0x64, 0xc7, 0x54, 0xbd, 0xf0, 0x84, 0x17, 0x48, 0xf3, 0x31, 0x2e, 0x79, 0x63, 0x75, 0x0a, 0x82,
	0xab, 0x8b, 0x1a, 0x6a, 0xa0, 0x56, 0xe9, 0xa8, 0xf6, 0xf3, 0xfb, 0x61, 0x39, 0x3d, 0xae, 0x37,
	0x1c, 0x0a, 0x2a, 0xe5, 0xb1, 0x12, 0x3c, 0x64, 0xee, 0x02, 0x35, 0x1d, 0xbc, 0x11, 0xcd, 0x1c,
	0x6a, 0x85, 0x06, 0x6a, 0x6d, 0x76, 0x2a, 0xce, 0xf5, 0x8e, 0x1d, 0xed, 0xef, 0xa6, 0x54, 0xb7,
	0xf2, 0xe1, 0xb2, 0x6e, 0xfc, 0xbd, 0xac, 0x1b, 0xef, 0xff, 0x7c, 0x3b, 0x58, 0xf8, 0x34, 0x2b,
	0xb8, 0x9c, 0xcf, 0xe3, 0x52, 0x19, 0x41, 0x28, 0x69, 0xf3, 0x2b, 0xc2, 0xd5, 0xbe, 0x64, 0x4f,
	0x04, 0xf5, 0x14, 0xed, 0x69, 0xdb, 0x9e, 0xef, 0xc3, 0x38, 0x54, 0x66, 0x07, 0xdf, 0xf5, 0x74,
	0xae, 0xb5, 0x89, 0x33, 0xd0, 0x6c, 0xe1, 0x1d, 0x05, 0x67, 0x34, 0x94, 0x27, 0xe0, 0x52, 0x9f,
	0xf2, 0x98, 0xce, 0x82, 0xdf, 0x71, 0x97, 0xb7, 0xcd, 0x87, 0x78, 0x3b, 0xa6, 0x52, 0xf1, 0x90,
	0x3d, 0x0b, 0x87, 0x27, 0x3c, 0xa0, 0xb5, 0x62, 0x03, 0xb5, 0x8a, 0xee, 0xd2, 0x6e, 0xf7, 0x5e,
	0xd6, 0x51, 0xf3, 0x3e, 0xae, 0xff, 0x27, 0xea, 0xbc, 0x9d, 0x4f, 0x08, 0xef, 0x24, 0xcc, 0x5b,
	0x8f, 0x07, 0x29, 0x62, 0x76, 0xf1, 0xe6, 0x1b, 0x01, 0x41, 0xef, 0x96, 0xad, 0xe4, 0xe1, 0x64,
	0x6c, 0x0a, 0xb2, 0xca, 0xc2, 0xba, 0xb1, 0xcd, 0xd1, 0x5c, 0xe8, 0x5d, 0x7d, 0xbf, 0xb9, 0x40,
	0x59, 0xd8, 0xce, 0x97, 0x02, 0x2e, 0xf6, 0x25, 0x33, 0x9f, 0xe3, 0xd2, 0xe2, 0x47, 0xd9, 0x5b,
	0x1e, 0x70, 0x7e, 0x6c, 0xd6, 0x83, 0x9b, 0xd4, 0xcc, 0xd8, 0x8c, 0x70, 0x79, 0xe5, 0x40, 0xf7,
	0x57, 0x54, 0xaf, 0x02, 0x2d, 0x72, 0x4b, 0x70, 0x7e, 0xe2, 0x4b, 0xbc, 0x75, 0xed, 0xce, 0xeb,
	0xab, 0x0c, 0x72, 0x80, 0xb5, 0xbf, 0x06, 0xc8, 0x9c, 0x8f, 0x9e, 0xfe, 0x98, 0xd8, 0xe8, 0x6a,
	0x62, 0xa3, 0xdf, 0x13, 0x1b, 0x7d, 0x9e, 0xda, 0xc6, 0xd5, 0xd4, 0x36, 0x7e, 0x4d, 0x6d, 0xe3,
	0xd5, 0x01, 0xe3, 0xea, 0x74, 0x3c, 0x70, 0x7c, 0x08, 0x08, 0x8c, 0xe0, 0x30, 0xa4, 0xea, 0x1d,
	0x88, 0xb3, 0xe4, 0x9b, 0x9c, 0xcf, 0x9f, 0xbb, 0xba, 0x88, 0xa8, 0x1c, 0x6c, 0xcc, 0x9e, 0xe5,
	0xa3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0x6a, 0x59, 0x9e, 0x49, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetParams sets the parameters for the airdrop module.
	SetParams(ctx context.Context, in *MsgSetParams, opts ...grpc.CallOption) (*MsgSetParamsResponse, error)
	// CreateAirdropAccount creates a linearly vesting account with tokensToReceive in it, as
	// well as an airdrop account with these records. If the amount of
	// tokensToReceive * DelegationRequirement are staked, the additional tokens can be claimed
	// into a second vesting account. This transaction can only occur at genesis.
	CreateAirdropAccount(ctx context.Context, in *MsgCreateAirdropAccount, opts ...grpc.CallOption) (*MsgCreateAirdropAccountResponse, error)
	// ClaimAirdrop allows an airdrop recipient to claim the 2nd portion of the airdrop specified in the
	// CreateAirdropAccount message. This transaction will create a new Delayed Vesting Account
	// at toAddress with the amount of tokens determined by tokensToReceive * AirdropFactor.
	// This account will vest as long as vestingLength above. This transaction fails if the amount
	// of tokens staked by the fromAddress account is less than tokensToReceive * DelegationRequirement.
	// Emits an event once the airdrop has been claimed.
	ClaimAirdrop(ctx context.Context, in *MsgClaimAirdrop, opts ...grpc.CallOption) (*MsgClaimAirdropResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetParams(ctx context.Context, in *MsgSetParams, opts ...grpc.CallOption) (*MsgSetParamsResponse, error) {
	out := new(MsgSetParamsResponse)
	err := c.cc.Invoke(ctx, "/ojo.airdrop.v1.Msg/SetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAirdropAccount(ctx context.Context, in *MsgCreateAirdropAccount, opts ...grpc.CallOption) (*MsgCreateAirdropAccountResponse, error) {
	out := new(MsgCreateAirdropAccountResponse)
	err := c.cc.Invoke(ctx, "/ojo.airdrop.v1.Msg/CreateAirdropAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAirdrop(ctx context.Context, in *MsgClaimAirdrop, opts ...grpc.CallOption) (*MsgClaimAirdropResponse, error) {
	out := new(MsgClaimAirdropResponse)
	err := c.cc.Invoke(ctx, "/ojo.airdrop.v1.Msg/ClaimAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetParams sets the parameters for the airdrop module.
	SetParams(context.Context, *MsgSetParams) (*MsgSetParamsResponse, error)
	// CreateAirdropAccount creates a linearly vesting account with tokensToReceive in it, as
	// well as an airdrop account with these records. If the amount of
	// tokensToReceive * DelegationRequirement are staked, the additional tokens can be claimed
	// into a second vesting account. This transaction can only occur at genesis.
	CreateAirdropAccount(context.Context, *MsgCreateAirdropAccount) (*MsgCreateAirdropAccountResponse, error)
	// ClaimAirdrop allows an airdrop recipient to claim the 2nd portion of the airdrop specified in the
	// CreateAirdropAccount message. This transaction will create a new Delayed Vesting Account
	// at toAddress with the amount of tokens determined by tokensToReceive * AirdropFactor.
	// This account will vest as long as vestingLength above. This transaction fails if the amount
	// of tokens staked by the fromAddress account is less than tokensToReceive * DelegationRequirement.
	// Emits an event once the airdrop has been claimed.
	ClaimAirdrop(context.Context, *MsgClaimAirdrop) (*MsgClaimAirdropResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetParams(ctx context.Context, req *MsgSetParams) (*MsgSetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParams not implemented")
}
func (*UnimplementedMsgServer) CreateAirdropAccount(ctx context.Context, req *MsgCreateAirdropAccount) (*MsgCreateAirdropAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirdropAccount not implemented")
}
func (*UnimplementedMsgServer) ClaimAirdrop(ctx context.Context, req *MsgClaimAirdrop) (*MsgClaimAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAirdrop not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ojo.airdrop.v1.Msg/SetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetParams(ctx, req.(*MsgSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAirdropAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAirdropAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAirdropAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ojo.airdrop.v1.Msg/CreateAirdropAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAirdropAccount(ctx, req.(*MsgCreateAirdropAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAirdrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ojo.airdrop.v1.Msg/ClaimAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAirdrop(ctx, req.(*MsgClaimAirdrop))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ojo.airdrop.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetParams",
			Handler:    _Msg_SetParams_Handler,
		},
		{
			MethodName: "CreateAirdropAccount",
			Handler:    _Msg_CreateAirdropAccount_Handler,
		},
		{
			MethodName: "ClaimAirdrop",
			Handler:    _Msg_ClaimAirdrop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ojo/airdrop/v1/tx.proto",
}

func (m *MsgSetParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdropAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdropAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdropAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingEndTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VestingEndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.TokensToReceive != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TokensToReceive))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdropAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdropAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdropAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimAirdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAirdrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAirdrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateAirdropAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TokensToReceive != 0 {
		n += 1 + sovTx(uint64(m.TokensToReceive))
	}
	if m.VestingEndTime != 0 {
		n += 1 + sovTx(uint64(m.VestingEndTime))
	}
	return n
}

func (m *MsgCreateAirdropAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimAirdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdropAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdropAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdropAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensToReceive", wireType)
			}
			m.TokensToReceive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokensToReceive |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingEndTime", wireType)
			}
			m.VestingEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdropAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdropAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdropAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAirdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAirdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAirdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
