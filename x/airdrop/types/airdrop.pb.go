// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/airdrop/v1/airdrop.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The current state of the airdrop account
type AirdropAccount_State int32

const (
	// Unspecified state
	AirdropAccount_STATE_UNSPECIFIED AirdropAccount_State = 0
	// The KV store entry has been created but initial tokens have not been allocated
	AirdropAccount_STATE_CREATED AirdropAccount_State = 1
	// The initial airdrop has been distributed but the 2nd half is unclaimed
	AirdropAccount_STATE_UNCLAIMED AirdropAccount_State = 2
	// The 2nd half of the airdrop has been distributed
	AirdropAccount_STATE_CLAIMED AirdropAccount_State = 3
)

var AirdropAccount_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "STATE_CREATED",
	2: "STATE_UNCLAIMED",
	3: "STATE_CLAIMED",
}

var AirdropAccount_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"STATE_CREATED":     1,
	"STATE_UNCLAIMED":   2,
	"STATE_CLAIMED":     3,
}

func (x AirdropAccount_State) String() string {
	return proto.EnumName(AirdropAccount_State_name, int32(x))
}

func (AirdropAccount_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_295074f7d14bf8dc, []int{1, 0}
}

// Params defines the parameters for the airdrop module.
type Params struct {
	// Flag to determine if the origin vesting accounts have been created yet
	OriginAccountsCreated bool `protobuf:"varint,1,opt,name=origin_accounts_created,json=originAccountsCreated,proto3" json:"origin_accounts_created,omitempty"`
	// The block at which all unclaimed AirdropAccounts will instead mint tokens
	// into the community pool. After this block, all unclaimed airdrop accounts
	// will no longer be able to be claimed.
	ExpiryBlock uint64 `protobuf:"varint,2,opt,name=expiry_block,json=expiryBlock,proto3" json:"expiry_block,omitempty"`
	// The percentage of the initial airdrop that users must delegate in order to
	// receive their second portion.
	// E.g., if we want to require users to stake their entire initial airdrop, this will be 1.
	// cosmos.base.v1beta1.Dec delegation_requirement = 1;
	DelegationRequirement *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=delegation_requirement,json=delegationRequirement,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegation_requirement,omitempty"`
	// The multiplier for the amount of tokens users will receive once they claim their airdrop.
	// E.g., if we want users to receive an equal second half, this will be 2.
	AirdropFactor *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=airdrop_factor,json=airdropFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"airdrop_factor,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_295074f7d14bf8dc, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// AirDropAccount defines an account that was created at genesis with an initial airdrop.
type AirdropAccount struct {
	VestingEndTime int64 `protobuf:"varint,1,opt,name=vesting_end_time,json=vestingEndTime,proto3" json:"vesting_end_time,omitempty"`
	// The address of the account that was created at genesis with the initial airdrop.
	OriginAddress string `protobuf:"bytes,2,opt,name=origin_address,json=originAddress,proto3" json:"origin_address,omitempty"`
	// The amount of tokens that were airdropped to the genesis account.
	OriginAmount uint64               `protobuf:"varint,3,opt,name=origin_amount,json=originAmount,proto3" json:"origin_amount,omitempty"`
	State        AirdropAccount_State `protobuf:"varint,4,opt,name=state,proto3,enum=ojo.airdrop.v1.AirdropAccount_State" json:"state,omitempty"`
	// The address of the account that the user has claimed the 2nd half of their airdrop to.
	ClaimAddress string `protobuf:"bytes,5,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	// The amount of tokens claimed in the 2nd half of the airdrop.
	ClaimAmount uint64 `protobuf:"varint,6,opt,name=claim_amount,json=claimAmount,proto3" json:"claim_amount,omitempty"`
}

func (m *AirdropAccount) Reset()         { *m = AirdropAccount{} }
func (m *AirdropAccount) String() string { return proto.CompactTextString(m) }
func (*AirdropAccount) ProtoMessage()    {}
func (*AirdropAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_295074f7d14bf8dc, []int{1}
}
func (m *AirdropAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropAccount.Merge(m, src)
}
func (m *AirdropAccount) XXX_Size() int {
	return m.Size()
}
func (m *AirdropAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropAccount proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ojo.airdrop.v1.AirdropAccount_State", AirdropAccount_State_name, AirdropAccount_State_value)
	proto.RegisterType((*Params)(nil), "ojo.airdrop.v1.Params")
	proto.RegisterType((*AirdropAccount)(nil), "ojo.airdrop.v1.AirdropAccount")
}

func init() { proto.RegisterFile("ojo/airdrop/v1/airdrop.proto", fileDescriptor_295074f7d14bf8dc) }

var fileDescriptor_295074f7d14bf8dc = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0x9b, 0x87, 0xe8, 0x90, 0x98, 0x74, 0x68, 0x20, 0x54, 0xc8, 0xa4, 0x01, 0xa1, 0x08,
	0x29, 0x8e, 0x0a, 0x12, 0x42, 0x48, 0x08, 0x39, 0x89, 0x2b, 0x22, 0x01, 0xaa, 0x9c, 0xb0, 0x80,
	0x8d, 0xe5, 0xd8, 0x83, 0x99, 0x24, 0xf6, 0x0d, 0xe3, 0x49, 0x68, 0xff, 0x82, 0x2d, 0xff, 0x51,
	0xfe, 0xa1, 0xcb, 0xaa, 0x2b, 0xc4, 0x02, 0x41, 0xf2, 0x23, 0xc8, 0x33, 0xe3, 0x3e, 0x56, 0x2c,
	0x58, 0xe5, 0xe6, 0x9c, 0x33, 0xf7, 0x9e, 0x39, 0xbe, 0x83, 0xee, 0xc2, 0x04, 0x3a, 0x1e, 0x65,
	0x01, 0x83, 0x79, 0x67, 0xb9, 0x97, 0x95, 0xe6, 0x9c, 0x01, 0x07, 0xac, 0xc3, 0x04, 0xcc, 0x0c,
	0x5a, 0xee, 0xed, 0x6c, 0x87, 0x10, 0x82, 0xa0, 0x3a, 0x69, 0x25, 0x55, 0x3b, 0x77, 0x7c, 0x48,
	0x22, 0x48, 0x5c, 0x49, 0xc8, 0x3f, 0x92, 0x6a, 0x7e, 0xdf, 0x40, 0xa5, 0x03, 0x8f, 0x79, 0x51,
	0x82, 0x9f, 0xa2, 0xdb, 0xc0, 0x68, 0x48, 0x63, 0xd7, 0xf3, 0x7d, 0x58, 0xc4, 0x3c, 0x71, 0x7d,
	0x46, 0x3c, 0x4e, 0x82, 0xba, 0xd6, 0xd0, 0x5a, 0xd7, 0x9c, 0x9a, 0xa4, 0x2d, 0xc5, 0xf6, 0x24,
	0x89, 0x77, 0x51, 0x99, 0x1c, 0xce, 0x29, 0x3b, 0x72, 0xc7, 0x33, 0xf0, 0xa7, 0xf5, 0x8d, 0x86,
	0xd6, 0x2a, 0x38, 0xd7, 0x25, 0xd6, 0x4d, 0x21, 0x0c, 0xe8, 0x56, 0x40, 0x66, 0x24, 0xf4, 0x38,
	0x85, 0xd8, 0x65, 0xe4, 0xf3, 0x82, 0x32, 0x12, 0x91, 0x98, 0xd7, 0xf3, 0x0d, 0xad, 0xb5, 0xd9,
	0x7d, 0xf6, 0xf3, 0xd7, 0xbd, 0x87, 0x21, 0xe5, 0x9f, 0x16, 0x63, 0xd3, 0x87, 0x48, 0x59, 0x54,
	0x3f, 0xed, 0x24, 0x98, 0x76, 0xf8, 0xd1, 0x9c, 0x24, 0x66, 0x9f, 0xf8, 0x67, 0xc7, 0x6d, 0xa4,
	0x6e, 0xd0, 0x27, 0xbe, 0x53, 0xbb, 0xe8, 0xeb, 0x5c, 0xb4, 0xc5, 0x2e, 0xd2, 0x55, 0x2a, 0xee,
	0x47, 0xcf, 0xe7, 0xc0, 0xea, 0x85, 0xff, 0x1c, 0x54, 0x51, 0xfd, 0xf6, 0x45, 0xbb, 0xe6, 0xb7,
	0x3c, 0xd2, 0x2d, 0x89, 0xa8, 0x3c, 0x70, 0x0b, 0x55, 0x97, 0x24, 0xe1, 0x34, 0x0e, 0x5d, 0x12,
	0x07, 0x2e, 0xa7, 0x11, 0x11, 0xc1, 0xe5, 0x1d, 0x5d, 0xe1, 0x76, 0x1c, 0x8c, 0x68, 0x44, 0xf0,
	0x4b, 0xa4, 0x67, 0x49, 0x07, 0x01, 0x23, 0x49, 0x22, 0x32, 0xdb, 0xec, 0xd6, 0xcf, 0x8e, 0xdb,
	0xdb, 0x6a, 0xa6, 0x25, 0x99, 0x21, 0x67, 0x34, 0x0e, 0x9d, 0x8a, 0x8a, 0x5e, 0x82, 0xf8, 0x3e,
	0xaa, 0x64, 0x0d, 0xa2, 0x74, 0xb6, 0x88, 0xb1, 0xe0, 0x94, 0x95, 0x4a, 0x60, 0xf8, 0x39, 0x2a,
	0x26, 0xdc, 0xe3, 0x44, 0x5c, 0x5d, 0x7f, 0xfc, 0xc0, 0xbc, 0xba, 0x2b, 0xe6, 0x55, 0xfb, 0xe6,
	0x30, 0xd5, 0x3a, 0xf2, 0x08, 0x7e, 0x81, 0x2a, 0xfe, 0xcc, 0xa3, 0xd1, 0xb9, 0xc1, 0xe2, 0x3f,
	0x0c, 0x96, 0x85, 0x3c, 0xf3, 0xb7, 0x8b, 0xca, 0xea, 0xb8, 0xb4, 0x57, 0x92, 0x2b, 0x21, 0x35,
	0x02, 0x6a, 0xbe, 0x47, 0x45, 0x31, 0x11, 0xd7, 0xd0, 0xd6, 0x70, 0x64, 0x8d, 0x6c, 0xf7, 0xdd,
	0xdb, 0xe1, 0x81, 0xdd, 0x1b, 0xec, 0x0f, 0xec, 0x7e, 0x35, 0x87, 0xb7, 0x50, 0x45, 0xc2, 0x3d,
	0xc7, 0xb6, 0x46, 0x76, 0xbf, 0xaa, 0xe1, 0x9b, 0xe8, 0x46, 0xa6, 0xec, 0xbd, 0xb6, 0x06, 0x6f,
	0xec, 0x7e, 0x75, 0xe3, 0x92, 0x4e, 0x41, 0xf9, 0xee, 0xab, 0x93, 0x3f, 0x46, 0xee, 0x64, 0x65,
	0x68, 0xa7, 0x2b, 0x43, 0xfb, 0xbd, 0x32, 0xb4, 0xaf, 0x6b, 0x23, 0x77, 0xba, 0x36, 0x72, 0x3f,
	0xd6, 0x46, 0xee, 0xc3, 0xa3, 0x4b, 0x9f, 0x1f, 0x26, 0xd0, 0x8e, 0x09, 0xff, 0x02, 0x6c, 0x9a,
	0xd6, 0x9d, 0xc3, 0xf3, 0x97, 0x26, 0xd6, 0x60, 0x5c, 0x12, 0x8f, 0xe4, 0xc9, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xdb, 0xe5, 0x38, 0x47, 0x85, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AirdropFactor != nil {
		{
			size := m.AirdropFactor.Size()
			i -= size
			if _, err := m.AirdropFactor.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintAirdrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DelegationRequirement != nil {
		{
			size := m.DelegationRequirement.Size()
			i -= size
			if _, err := m.DelegationRequirement.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintAirdrop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpiryBlock != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.ExpiryBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.OriginAccountsCreated {
		i--
		if m.OriginAccountsCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AirdropAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimAmount != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.ClaimAmount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClaimAddress) > 0 {
		i -= len(m.ClaimAddress)
		copy(dAtA[i:], m.ClaimAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.ClaimAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.OriginAmount != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.OriginAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OriginAddress) > 0 {
		i -= len(m.OriginAddress)
		copy(dAtA[i:], m.OriginAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.OriginAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.VestingEndTime != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.VestingEndTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAirdrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovAirdrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginAccountsCreated {
		n += 2
	}
	if m.ExpiryBlock != 0 {
		n += 1 + sovAirdrop(uint64(m.ExpiryBlock))
	}
	if m.DelegationRequirement != nil {
		l = m.DelegationRequirement.Size()
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.AirdropFactor != nil {
		l = m.AirdropFactor.Size()
		n += 1 + l + sovAirdrop(uint64(l))
	}
	return n
}

func (m *AirdropAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VestingEndTime != 0 {
		n += 1 + sovAirdrop(uint64(m.VestingEndTime))
	}
	l = len(m.OriginAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.OriginAmount != 0 {
		n += 1 + sovAirdrop(uint64(m.OriginAmount))
	}
	if m.State != 0 {
		n += 1 + sovAirdrop(uint64(m.State))
	}
	l = len(m.ClaimAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.ClaimAmount != 0 {
		n += 1 + sovAirdrop(uint64(m.ClaimAmount))
	}
	return n
}

func sovAirdrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAirdrop(x uint64) (n int) {
	return sovAirdrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAccountsCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OriginAccountsCreated = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryBlock", wireType)
			}
			m.ExpiryBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRequirement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.DelegationRequirement = &v
			if err := m.DelegationRequirement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.AirdropFactor = &v
			if err := m.AirdropFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingEndTime", wireType)
			}
			m.VestingEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginAmount", wireType)
			}
			m.OriginAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AirdropAccount_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAmount", wireType)
			}
			m.ClaimAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAirdrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAirdrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAirdrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAirdrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAirdrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAirdrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAirdrop = fmt.Errorf("proto: unexpected end of group")
)
