// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/relayoracle/v1/oracle.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PriceRequestType int32

const (
	PRICE_REQUEST_RATE      PriceRequestType = 0
	PRICE_REQUEST_MEDIAN    PriceRequestType = 1
	PRICE_REQUEST_DEVIATION PriceRequestType = 2
)

var PriceRequestType_name = map[int32]string{
	0: "PRICE_REQUEST_RATE",
	1: "PRICE_REQUEST_MEDIAN",
	2: "PRICE_REQUEST_DEVIATION",
}

var PriceRequestType_value = map[string]int32{
	"PRICE_REQUEST_RATE":      0,
	"PRICE_REQUEST_MEDIAN":    1,
	"PRICE_REQUEST_DEVIATION": 2,
}

func (x PriceRequestType) String() string {
	return proto.EnumName(PriceRequestType_name, int32(x))
}

func (PriceRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aec1d0741e06b9d2, []int{0}
}

type OracleRequestPacketData struct {
	ClientID  string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RequestID string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Calldata  []byte `protobuf:"bytes,3,opt,name=calldata,proto3" json:"calldata,omitempty"`
}

func (m *OracleRequestPacketData) Reset()         { *m = OracleRequestPacketData{} }
func (m *OracleRequestPacketData) String() string { return proto.CompactTextString(m) }
func (*OracleRequestPacketData) ProtoMessage()    {}
func (*OracleRequestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_aec1d0741e06b9d2, []int{0}
}
func (m *OracleRequestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRequestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRequestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRequestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRequestPacketData.Merge(m, src)
}
func (m *OracleRequestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *OracleRequestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRequestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRequestPacketData proto.InternalMessageInfo

func (m *OracleRequestPacketData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *OracleRequestPacketData) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *OracleRequestPacketData) GetCalldata() []byte {
	if m != nil {
		return m.Calldata
	}
	return nil
}

type RequestPrice struct {
	Denom   string           `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Request PriceRequestType `protobuf:"varint,2,opt,name=request,proto3,enum=ojo.relayoracle.v1.PriceRequestType" json:"request,omitempty"`
}

func (m *RequestPrice) Reset()         { *m = RequestPrice{} }
func (m *RequestPrice) String() string { return proto.CompactTextString(m) }
func (*RequestPrice) ProtoMessage()    {}
func (*RequestPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_aec1d0741e06b9d2, []int{1}
}
func (m *RequestPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPrice.Merge(m, src)
}
func (m *RequestPrice) XXX_Size() int {
	return m.Size()
}
func (m *RequestPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPrice.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPrice proto.InternalMessageInfo

func (m *RequestPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *RequestPrice) GetRequest() PriceRequestType {
	if m != nil {
		return m.Request
	}
	return PRICE_REQUEST_RATE
}

type PriceStamp struct {
	ExchangeRate []types.DecCoin `protobuf:"bytes,1,rep,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate"`
	BlockNum     []uint64        `protobuf:"varint,2,rep,packed,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
}

func (m *PriceStamp) Reset()         { *m = PriceStamp{} }
func (m *PriceStamp) String() string { return proto.CompactTextString(m) }
func (*PriceStamp) ProtoMessage()    {}
func (*PriceStamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aec1d0741e06b9d2, []int{2}
}
func (m *PriceStamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceStamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceStamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceStamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceStamp.Merge(m, src)
}
func (m *PriceStamp) XXX_Size() int {
	return m.Size()
}
func (m *PriceStamp) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceStamp.DiscardUnknown(m)
}

var xxx_messageInfo_PriceStamp proto.InternalMessageInfo

func (m *PriceStamp) GetExchangeRate() []types.DecCoin {
	if m != nil {
		return m.ExchangeRate
	}
	return nil
}

func (m *PriceStamp) GetBlockNum() []uint64 {
	if m != nil {
		return m.BlockNum
	}
	return nil
}

func init() {
	proto.RegisterEnum("ojo.relayoracle.v1.PriceRequestType", PriceRequestType_name, PriceRequestType_value)
	proto.RegisterType((*OracleRequestPacketData)(nil), "ojo.relayoracle.v1.OracleRequestPacketData")
	proto.RegisterType((*RequestPrice)(nil), "ojo.relayoracle.v1.RequestPrice")
	proto.RegisterType((*PriceStamp)(nil), "ojo.relayoracle.v1.PriceStamp")
}

func init() { proto.RegisterFile("ojo/relayoracle/v1/oracle.proto", fileDescriptor_aec1d0741e06b9d2) }

var fileDescriptor_aec1d0741e06b9d2 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x3b, 0x80, 0x0a, 0x23, 0x6b, 0xc8, 0x84, 0xb8, 0xa4, 0x6b, 0x4a, 0x43, 0x3c, 0xa0,
	0xd1, 0x69, 0xc0, 0x8b, 0xf1, 0x60, 0x02, 0xb4, 0xd1, 0x1e, 0x64, 0xd7, 0x59, 0xf4, 0xe0, 0x85,
	0x0c, 0xd3, 0x09, 0x5b, 0x68, 0x3b, 0x58, 0x86, 0x75, 0xf9, 0x06, 0x86, 0x93, 0x07, 0xaf, 0x24,
	0x26, 0x7e, 0x07, 0x3f, 0xc3, 0x1e, 0xf7, 0xe8, 0x89, 0x98, 0x72, 0xf1, 0x63, 0x98, 0xfe, 0xc1,
	0x88, 0xae, 0xb7, 0x77, 0xde, 0xdf, 0xf3, 0x3e, 0xf3, 0xe6, 0xc9, 0x0b, 0xeb, 0x62, 0x22, 0x8c,
	0x90, 0x7b, 0x74, 0x29, 0x42, 0xca, 0x3c, 0x6e, 0x9c, 0xb7, 0x8c, 0xb4, 0xc2, 0xb3, 0x50, 0x48,
	0x81, 0x90, 0x98, 0x08, 0xfc, 0x87, 0x00, 0x9f, 0xb7, 0xd4, 0xea, 0x58, 0x8c, 0x45, 0x82, 0x8d,
	0xb8, 0x4a, 0x95, 0xaa, 0xc6, 0xc4, 0xdc, 0x17, 0x73, 0x63, 0x44, 0xe7, 0xb1, 0xcd, 0x88, 0x4b,
	0xda, 0x32, 0x98, 0x70, 0x83, 0x94, 0x37, 0x3e, 0x03, 0x78, 0x78, 0x9c, 0x78, 0x10, 0xfe, 0x7e,
	0xc1, 0xe7, 0xf2, 0x84, 0xb2, 0x29, 0x97, 0x26, 0x95, 0x14, 0x3d, 0x80, 0x25, 0xe6, 0xb9, 0x3c,
	0x90, 0x43, 0xd7, 0xa9, 0x01, 0x1d, 0x34, 0x4b, 0xdd, 0x72, 0xb4, 0xa9, 0x17, 0x7b, 0x49, 0xd3,
	0x36, 0x49, 0x31, 0xc5, 0xb6, 0x83, 0x1e, 0x41, 0x18, 0xa6, 0xf3, 0xb1, 0x36, 0x97, 0x68, 0x0f,
	0xa2, 0x4d, 0xbd, 0x94, 0xb9, 0xda, 0x26, 0x29, 0x65, 0x02, 0xdb, 0x41, 0x2a, 0x2c, 0x32, 0xea,
	0x79, 0x0e, 0x95, 0xb4, 0x96, 0xd7, 0x41, 0xb3, 0x4c, 0x7e, 0xbf, 0x9f, 0x15, 0x7e, 0x7e, 0xa9,
	0x83, 0x86, 0x03, 0xcb, 0xbb, 0x7d, 0x42, 0x97, 0x71, 0x54, 0x85, 0x37, 0x1c, 0x1e, 0x08, 0x3f,
	0x5d, 0x83, 0xa4, 0x0f, 0xf4, 0x1c, 0xde, 0xca, 0x4c, 0x93, 0x2f, 0xef, 0xb4, 0xef, 0xe3, 0x7f,
	0x83, 0xc1, 0x89, 0x43, 0xe6, 0x36, 0x58, 0xce, 0x38, 0xd9, 0x0d, 0x35, 0x42, 0x08, 0x13, 0x78,
	0x2a, 0xa9, 0x3f, 0x43, 0x2f, 0xe0, 0x01, 0xbf, 0x60, 0x67, 0x34, 0x18, 0xf3, 0x61, 0x48, 0x25,
	0xaf, 0x01, 0x3d, 0xdf, 0xbc, 0xdd, 0xbe, 0x87, 0xd3, 0x08, 0x71, 0x1c, 0x21, 0xce, 0x22, 0xc4,
	0x26, 0x67, 0x3d, 0xe1, 0x06, 0xdd, 0xc2, 0xe5, 0xa6, 0xae, 0x90, 0xf2, 0x6e, 0x90, 0x50, 0xc9,
	0xd1, 0x11, 0x2c, 0x8d, 0x3c, 0xc1, 0xa6, 0xc3, 0x60, 0xe1, 0xd7, 0x72, 0x7a, 0xbe, 0x59, 0x20,
	0xc5, 0xa4, 0xd1, 0x5f, 0xf8, 0x0f, 0xbf, 0x01, 0x58, 0xf9, 0x7b, 0x23, 0x84, 0x21, 0x3a, 0x21,
	0x76, 0xcf, 0x1a, 0x12, 0xeb, 0xf5, 0x1b, 0xeb, 0x74, 0x30, 0x24, 0x9d, 0x81, 0x55, 0x51, 0xd4,
	0xbb, 0xab, 0xb5, 0x7e, 0x0d, 0x41, 0x6d, 0x58, 0xdd, 0xef, 0xbe, 0xb2, 0x4c, 0xbb, 0xd3, 0xaf,
	0x00, 0xb5, 0xb6, 0x5a, 0xeb, 0xd7, 0x32, 0xf4, 0x14, 0x1e, 0xee, 0xf7, 0x4d, 0xeb, 0xad, 0xdd,
	0x19, 0xd8, 0xc7, 0xfd, 0x4a, 0x4e, 0x3d, 0x5a, 0xad, 0xf5, 0xff, 0x61, 0xb5, 0xf0, 0xf1, 0xab,
	0xa6, 0x74, 0x5f, 0x5e, 0x46, 0x1a, 0xb8, 0x8a, 0x34, 0xf0, 0x23, 0xd2, 0xc0, 0xa7, 0xad, 0xa6,
	0x5c, 0x6d, 0x35, 0xe5, 0xfb, 0x56, 0x53, 0xde, 0xe1, 0xb1, 0x2b, 0xcf, 0x16, 0x23, 0xcc, 0x84,
	0x6f, 0x88, 0x89, 0x78, 0x1c, 0x70, 0xf9, 0x41, 0x84, 0xd3, 0xb8, 0x36, 0x2e, 0xf6, 0xee, 0x58,
	0x2e, 0x67, 0x7c, 0x3e, 0xba, 0x99, 0x9c, 0xde, 0x93, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40,
	0x1f, 0xb1, 0xd0, 0xe7, 0x02, 0x00, 0x00,
}

func (this *OracleRequestPacketData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleRequestPacketData)
	if !ok {
		that2, ok := that.(OracleRequestPacketData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if !bytes.Equal(this.Calldata, that1.Calldata) {
		return false
	}
	return true
}
func (m *OracleRequestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Calldata) > 0 {
		i -= len(m.Calldata)
		copy(dAtA[i:], m.Calldata)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Calldata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Request))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceStamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceStamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceStamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockNum) > 0 {
		dAtA2 := make([]byte, len(m.BlockNum)*10)
		var j1 int
		for _, num := range m.BlockNum {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintOracle(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExchangeRate) > 0 {
		for iNdEx := len(m.ExchangeRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OracleRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Calldata)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *RequestPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Request != 0 {
		n += 1 + sovOracle(uint64(m.Request))
	}
	return n
}

func (m *PriceStamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		for _, e := range m.ExchangeRate {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if len(m.BlockNum) > 0 {
		l = 0
		for _, e := range m.BlockNum {
			l += sovOracle(uint64(e))
		}
		n += 1 + sovOracle(uint64(l)) + l
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OracleRequestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRequestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRequestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calldata = append(m.Calldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Calldata == nil {
				m.Calldata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			m.Request = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Request |= PriceRequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceStamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceStamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceStamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = append(m.ExchangeRate, types.DecCoin{})
			if err := m.ExchangeRate[len(m.ExchangeRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOracle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockNum = append(m.BlockNum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOracle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOracle
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOracle
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockNum) == 0 {
					m.BlockNum = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOracle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockNum = append(m.BlockNum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
