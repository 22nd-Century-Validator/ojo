// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojo/gmp/v1/gmp.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the gmp module.
type Params struct {
	// The axelar address that we'll send IBC transactions to.
	GmpAddress string `protobuf:"bytes,1,opt,name=gmp_address,json=gmpAddress,proto3" json:"gmp_address,omitempty"`
	// The channel over which we communicate with axelar.
	GmpChannel string `protobuf:"bytes,2,opt,name=gmp_channel,json=gmpChannel,proto3" json:"gmp_channel,omitempty"`
	// The amount of time we'll wait for a response from axelar before timing out.
	GmpTimeout int64 `protobuf:"varint,3,opt,name=gmp_timeout,json=gmpTimeout,proto3" json:"gmp_timeout,omitempty"`
	// The axelar address of the fee recipient.
	FeeRecipient string `protobuf:"bytes,4,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_199820a7e9d7929f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// GmpMessage defines the GMP message that we encode in the
// IBC memo field and send to Axelar.
//
// Ref: https://github.com/axelarnetwork/evm-cosmos-gmp-sample
type GmpMessage struct {
	// destination_chain is the destination chain of the message
	DestinationChain string `protobuf:"bytes,1,opt,name=destination_chain,json=destinationChain,proto3" json:"destination_chain,omitempty"`
	// destination_address is the destination address of the message
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	// payload is the encoded payload of the message (exchange rates)
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// type is an enum that specifies the type of message
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// fee is the fee payed to a relayer on the Axelar network
	Fee *GmpFee `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *GmpMessage) Reset()         { *m = GmpMessage{} }
func (m *GmpMessage) String() string { return proto.CompactTextString(m) }
func (*GmpMessage) ProtoMessage()    {}
func (*GmpMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_199820a7e9d7929f, []int{1}
}
func (m *GmpMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GmpMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GmpMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GmpMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GmpMessage.Merge(m, src)
}
func (m *GmpMessage) XXX_Size() int {
	return m.Size()
}
func (m *GmpMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GmpMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GmpMessage proto.InternalMessageInfo

// GMPFee defines the fee field message inside of GMPMessage.
type GmpFee struct {
	// Fee amount
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Recipient of fee; should be fee_recipient.
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *GmpFee) Reset()         { *m = GmpFee{} }
func (m *GmpFee) String() string { return proto.CompactTextString(m) }
func (*GmpFee) ProtoMessage()    {}
func (*GmpFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_199820a7e9d7929f, []int{2}
}
func (m *GmpFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GmpFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GmpFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GmpFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GmpFee.Merge(m, src)
}
func (m *GmpFee) XXX_Size() int {
	return m.Size()
}
func (m *GmpFee) XXX_DiscardUnknown() {
	xxx_messageInfo_GmpFee.DiscardUnknown(m)
}

var xxx_messageInfo_GmpFee proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "ojo.gmp.v1.Params")
	proto.RegisterType((*GmpMessage)(nil), "ojo.gmp.v1.GmpMessage")
	proto.RegisterType((*GmpFee)(nil), "ojo.gmp.v1.GmpFee")
}

func init() { proto.RegisterFile("ojo/gmp/v1/gmp.proto", fileDescriptor_199820a7e9d7929f) }

var fileDescriptor_199820a7e9d7929f = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xc1, 0x0e, 0xd2, 0x40,
	0x10, 0x86, 0xbb, 0x16, 0x6b, 0x18, 0x30, 0xd1, 0x95, 0x98, 0xc6, 0x98, 0x4a, 0xd0, 0x18, 0x12,
	0x63, 0x1b, 0xf4, 0x6e, 0xa2, 0x18, 0x39, 0x99, 0x98, 0xc6, 0x93, 0x17, 0xb2, 0xd0, 0xa1, 0x14,
	0xd9, 0x9d, 0x4d, 0xbb, 0xa0, 0xbc, 0x05, 0x4f, 0xe4, 0x99, 0x23, 0x47, 0x8f, 0x0a, 0x2f, 0x62,
	0x76, 0x4b, 0x85, 0x53, 0xe7, 0xff, 0xe7, 0x4f, 0xf7, 0x9b, 0xd9, 0x85, 0x1e, 0xad, 0x28, 0xc9,
	0xa5, 0x4e, 0xb6, 0x23, 0xfb, 0x89, 0x75, 0x49, 0x86, 0x38, 0xd0, 0x8a, 0x62, 0x2b, 0xb7, 0xa3,
	0x27, 0xbd, 0x9c, 0x72, 0x72, 0x76, 0x62, 0xab, 0x3a, 0x31, 0xd8, 0x33, 0x08, 0xbe, 0x88, 0x52,
	0xc8, 0x8a, 0x3f, 0x83, 0x4e, 0x2e, 0xf5, 0x54, 0x64, 0x59, 0x89, 0x55, 0x15, 0xb2, 0x3e, 0x1b,
	0xb6, 0x53, 0xc8, 0xa5, 0x7e, 0x5f, 0x3b, 0x4d, 0x60, 0xbe, 0x14, 0x4a, 0xe1, 0x3a, 0xbc, 0xf3,
	0x3f, 0x30, 0xae, 0x9d, 0x26, 0x60, 0x0a, 0x89, 0xb4, 0x31, 0xa1, 0xdf, 0x67, 0x43, 0xdf, 0x05,
	0xbe, 0xd6, 0x0e, 0x7f, 0x0e, 0xf7, 0x17, 0x88, 0xd3, 0x12, 0xe7, 0x85, 0x2e, 0x50, 0x99, 0xb0,
	0xe5, 0xfe, 0xd1, 0x5d, 0x20, 0xa6, 0x8d, 0x37, 0xf8, 0xc5, 0x00, 0x26, 0x52, 0x7f, 0xc6, 0xaa,
	0x12, 0x39, 0xf2, 0x57, 0xf0, 0x30, 0xc3, 0xca, 0x14, 0x4a, 0x98, 0x82, 0x94, 0x3d, 0xbd, 0x50,
	0x17, 0xb8, 0x07, 0x37, 0x8d, 0xb1, 0xf5, 0x79, 0x02, 0x8f, 0x6e, 0xc3, 0xcd, 0x2c, 0x35, 0x2a,
	0xbf, 0x69, 0x35, 0x33, 0x85, 0x70, 0x4f, 0x8b, 0xdd, 0x9a, 0x44, 0xe6, 0x70, 0xbb, 0x69, 0x23,
	0x39, 0x87, 0x96, 0xd9, 0x69, 0x74, 0x88, 0x7e, 0xea, 0x6a, 0xfe, 0x02, 0xfc, 0x05, 0x62, 0x78,
	0xb7, 0xcf, 0x86, 0x9d, 0x37, 0x3c, 0xbe, 0x6e, 0x37, 0x9e, 0x48, 0xfd, 0x09, 0x31, 0xb5, 0xed,
	0xc1, 0x3b, 0x08, 0x6a, 0xc9, 0x1f, 0x43, 0x20, 0x24, 0x6d, 0x94, 0xb9, 0x00, 0x5f, 0x14, 0x7f,
	0x0a, 0xed, 0xeb, 0x0e, 0x6a, 0xb8, 0xab, 0xf1, 0xe1, 0xe3, 0xe1, 0x6f, 0xe4, 0x1d, 0x4e, 0x11,
	0x3b, 0x9e, 0x22, 0xf6, 0xe7, 0x14, 0xb1, 0xfd, 0x39, 0xf2, 0x8e, 0xe7, 0xc8, 0xfb, 0x7d, 0x8e,
	0xbc, 0x6f, 0x2f, 0xf3, 0xc2, 0x2c, 0x37, 0xb3, 0x78, 0x4e, 0x32, 0xa1, 0x15, 0xbd, 0x56, 0x68,
	0x7e, 0x50, 0xf9, 0xdd, 0xd6, 0xc9, 0x4f, 0xf7, 0x04, 0x2c, 0x6a, 0x35, 0x0b, 0xdc, 0x05, 0xbf,
	0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x13, 0x9e, 0xc8, 0x1a, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeRecipient) > 0 {
		i -= len(m.FeeRecipient)
		copy(dAtA[i:], m.FeeRecipient)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.FeeRecipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.GmpTimeout != 0 {
		i = encodeVarintGmp(dAtA, i, uint64(m.GmpTimeout))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GmpChannel) > 0 {
		i -= len(m.GmpChannel)
		copy(dAtA[i:], m.GmpChannel)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.GmpChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GmpAddress) > 0 {
		i -= len(m.GmpAddress)
		copy(dAtA[i:], m.GmpAddress)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.GmpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GmpMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmpMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GmpMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGmp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintGmp(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GmpFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmpFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GmpFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovGmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GmpAddress)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.GmpChannel)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	if m.GmpTimeout != 0 {
		n += 1 + sovGmp(uint64(m.GmpTimeout))
	}
	l = len(m.FeeRecipient)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	return n
}

func (m *GmpMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGmp(uint64(m.Type))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovGmp(uint64(l))
	}
	return n
}

func (m *GmpFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	return n
}

func sovGmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGmp(x uint64) (n int) {
	return sovGmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GmpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GmpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GmpChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GmpChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GmpTimeout", wireType)
			}
			m.GmpTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GmpTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GmpMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmpMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmpMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &GmpFee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GmpFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmpFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmpFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGmp = fmt.Errorf("proto: unexpected end of group")
)
